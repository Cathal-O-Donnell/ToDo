@model ToDo.Models.Event


@*<body onload="myFunction(@ViewBag.Lat, @ViewBag.Long)">*@
<body>

    @*Check if current user is the owner of this event*@
    @if (ViewBag.IsOwner == true)
    {
        <div style="padding-top: 25px;">
            @Html.ActionLink("Edit", "Edit", new { id = Model.EventID }, new { @class = "btn btn-primary" })

            @Html.ActionLink("Remove", "Delete", new { id = Model.EventID }, new { @class = "btn btn-danger" })
        </div>
    }

    <div>

        <div style="display: inline; vertical-align: top;">
            <h1>@Model.EventTitle</h1>
            @Html.ActionLink(Model.Venue.VenueTown.TownName, "Index", "Venues", new { AdvancedSearch = "true", Town = Model.Venue.VenueTown.TownID }, null)
        </div>
        <hr />

        <div class="row">
            @*Image*@
            <div class="col-sm-3">

                @*Check if event has image*@
                @if (Model.Files.Any(f => f.FileType == ToDo.Models.FileType.EventImage))
                {
                    <img src="~/File?id=@Model.Files.First().FileId" alt="imgEvent" style="width: 250px; height:250px;" />
                }

                @*No event image was uploaded, display default image*@
                else
                {
                    <h4>No Image</h4>
                }

                @*Social Links*@
                <p>
                    @*Facebook*@
                    @if (Model.EventFacebook != null || Model.EventFacebook != "")
                    {
                        <a href="@Model.EventFacebook" class="fa fa-facebook-official" style="font-size:30px;color:#3b5998"></a>
                    }

                    @*Twitter*@
                    @if (Model.EventTwitter != null)
                    {
                        <a href="@Model.EventTwitter" class="fa fa-twitter" style="font-size:30px;color:#0084b4"></a>
                    }

                    @*Instagram*@
                    @if (Model.EventInstagram != null)
                    {
                        <a href="@Model.EventInstagram" class="fa fa-instagram" style="font-size:30px;color:#fb3958"></a>
                    }
                </p>
                <p style="padding-top:15px;">

                    <button class="btn btn-primary">
                        <span class="glyphicon glyphicon-plus pull-left"></span> Subscribe
                    </button>
                </p>

            </div>

            @*Tabs*@
            <div class="col-sm-9">
                <ul class="nav nav-tabs">
                    <li class="active"><a data-toggle="tab" href="#home">@Html.DisplayNameFor(model => model.EventDescription)</a></li>
                    <li><a data-toggle="tab" href="#menu1">Where and When</a></li>
                    <li><a data-toggle="tab" href="#menu2">More Info</a></li>
                </ul>

                <div class="tab-content">

                    @*Description*@
                    <div id="home" class="tab-pane fade in active">
                        <p style="white-space: pre-wrap; padding-top:10px;">@Html.DisplayFor(model => model.EventDescription)</p>
                    </div>

                    @*Where and When*@
                    <div id="menu1" class="tab-pane fade">
                        <div class="col-sm-4">
                            <h2 style="color: #70b2f9;">Where</h2>

                            <h3>@ViewBag.EVenue</h3>

                            <h3>@ViewBag.EAddress</h3>

                            <h3>@ViewBag.ETown</h3>
                        </div>

                        <div class="col-sm-4">
                            @*When*@
                            <h2 style="color: #70b2f9;">When</h2>
                            <h3>Date: @Model.EventDate.ToShortDateString()</h3>

                            <h3>Start Time: @Model.EventTime.ToShortTimeString()</h3>

                            @if (Model.EventEndTime != null)
                            {
                                <h3>End Time: @Model.EventEndTime.ToShortTimeString()</h3>
                            }
                        </div>
                    </div>

                    @*More Info*@
                    <div id="menu2" class="tab-pane fade">

                        <h2 style="color: #70b2f9;">More Info</h2>

                        @*Free Event*@
                        @if (ViewBag.FreeEvent == true)
                        {
                            <h3>@Html.DisplayNameFor(model => model.EventTicketPrice): Free Event</h3>
                        }
                        else
                        {
                            <h3>@Html.DisplayNameFor(model => model.EventTicketPrice): € @Html.DisplayFor(model => model.EventTicketPrice)</h3>
                        }

                        @*Ticket Store Information*@
                        @if (Model.EventTicketStore != null)
                        {
                            <h3>@Html.DisplayNameFor(model => model.EventTicketStore): @Html.DisplayFor(model => model.EventTicketStore)</h3>
                        }

                        @*Phone Number*@
                        @if (ViewBag.EPhone != null)
                        {
                            <h3>Phone: @ViewBag.EPhone</h3>
                        }

                        @*Email*@
                        @if (ViewBag.EEmail != null)
                        {
                            <h3>Email: @ViewBag.EEmail</h3>
                        }

                        @*Website*@
                        @if (Model.EventWebsite != null)
                        {
                            <h3>@Html.DisplayNameFor(model => model.EventWebsite): @Html.DisplayFor(model => model.EventWebsite)</h3>
                        }

                    </div>
                </div>
            </div>
        </div>
    </div>

    <hr />

    <div class="row">

        <div class="col-sm-6" style="margin: auto;">

            @*Check if there is a youtube link for this event*@
            @if (ViewBag.hasYT == true)
            {
                <div id="player">

                </div>
            }

            else
            {
                <h4>No YouTube link</h4>
            }

        </div>
    </div>
    <div class="row">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
    </div>
  
</body>

@*Google Maps and Directions*@
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyChwQrjSkHEgvgg56PI5G_aEGFoAbk-Vg8"></script>

<script>

    @*//Directions
    function PlanRoute() {

        //Check if the user has entered a starting location
        var startingLoc = document.getElementById('txtFrom').value;

        if (startingLoc == null || startingLoc == "") {
            alert("You must enter a starting location first");
        }

        else
        {
            GetMap();
        }

    }

    function GetMap() {

        //Clear last directions
        document.getElementById('dir').innerHTML = "";
        txtDirections.innerHTML = "";

        var directionsService = new google.maps.DirectionsService();
        var directionsDisplay = new google.maps.DirectionsRenderer();

        //Get start and End locations that the user selected
        var startLocation = document.getElementById('txtFrom').value;
        var endLocation =  @Html.Raw(Json.Encode(@ViewBag.Address));

        console.log(startLocation);
        console.log(endLocation);

        var map = new google.maps.Map(document.getElementById('googleMap'), {

        });

        directionsDisplay.setMap(map);
        directionsDisplay.setPanel(document.getElementById('dir'));

        //Map options
        var request = {
            origin: startLocation,
            destination: endLocation,
            travelMode: google.maps.DirectionsTravelMode.DRIVING
        };

        directionsService.route(request, function (response, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                directionsDisplay.setDirections(response);
            }

            $('txtDirections').innerHTML = directions.getDuration().seconds + " seconds";

        });
    }

    //Google Map
    function myFunction(lat, lon) {

        // Array of stylin for map
        var styles = [
          {
              stylers: [
                { hue: "#b3ccff" },
                { saturation: -30 }
              ]
          },
          //Road Labels
          {
              featureType: "road",
              elementType: "labels",
              stylers: [
                { visibility: "on" }
              ]
          },
          //Road Geometry
          {
              featureType: "road",
              elementType: "geometry",
              stylers: [
                { lightness: 100 },
                { visibility: "simplified" }
              ]
          }
        ];

        var styledMap = new google.maps.StyledMapType(styles,
          { name: "Styled Map" });

        //Get center using longitude and latitude passed back from controller
        var center = new google.maps.LatLng(lat, lon);

        //Specify Map Options
        var mapOptions = {
            zoom: 17, //Map Zoom Level
            center: center, //Set Map center point
            mapTypeControlOptions: {
                mapTypeIds: [google.maps.MapTypeId.ROADMAP, 'map_style']
            }
        };

        //Assign Map to div
        var map = new google.maps.Map(document.getElementById('googleMap'),
          mapOptions);

        var marker = new google.maps.Marker({
            position: center,
            map: map,
            title: "@ViewBag.EventTitle"
        })

        map.mapTypes.set('map_style', styledMap);
        map.setMapTypeId('map_style');

        // google.maps.event.addDomListener(window, "load", initialize);
    }*@

    //YouTube iFrame API code
    //This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    //This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {

        //Video ID
        var youTubeLink = @Html.Raw(Json.Encode(@ViewBag.youTubeID))

        player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: youTubeLink,
            events: {
                //'onReady': onPlayerReady, - AUTOPLAY
                'onStateChange': onPlayerStateChange
            }
        });
    }

    //This  function causes the video the play automatically, NOT CURRENTLY USED
    function onPlayerReady(event) {
        event.target.playVideo();
    }

    //The API calls this function when the player's state changes.
    //The function indicates that when playing a video (state=1),
    //the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
            setTimeout(stopVideo, 6000);
            done = true;
        }
    }
    function stopVideo() {
        player.stopVideo();
    }

    //Comments section
    (function() { // DON'T EDIT BELOW THIS LINE
        var d = document, s = d.createElement('script');

        s.src = '//s00144297.disqus.com/embed.js';
        //src="//s00144297.disqus.com/count.js

        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


