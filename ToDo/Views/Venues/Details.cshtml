@model ToDo.Models.Venue

@*<body onload="GoogleMap(@ViewBag.Lat, @ViewBag.Long)">*@
@*<body>*@

@*Check if current user is the owner of this event*@
@if (ViewBag.IsOwner == true)
{
    <div style="padding-top: 25px;">
        @Html.ActionLink("Edit", "Edit", new { id = Model.VenueID }, new { @class = "btn btn-primary" })

        @Html.ActionLink("Remove", "Delete", new { id = Model.VenueID }, new { @class = "btn btn-danger" })
    </div>
}

<div style="display: inline; vertical-align: top;">
    <h1>@Model.VenueName</h1>

    @Html.ActionLink(Model.VenueTown.TownName, "Index", "Venues", new { AdvancedSearch = "true", Town = Model.VenueTown.TownID }, null)
</div>

<div>
    <hr />
    <div class="row">

        @*Image*@
        <div class="col-sm-3">

            @*Check if event has image*@
            @if (Model.VenueFiles.Any(f => f.VenueFileType == ToDo.Models.FileType.EventImage))
            {
                <img src="~/File?id=@Model.VenueFiles.First().VenueFileId" alt="imgEvent" style="width: 250px; height:250px;" />
            }

            @*No event image was uploaded, display default image*@
            else
            {
                <img src="~/default.jpg" alt="imgDefault" style="width: 250px; height:250px;" />
            }
        </div>

        @*Tabs*@
        <div class="col-sm-9">
            <ul class="nav nav-tabs">
                <li class="active"><a data-toggle="tab" href="#home">@Html.DisplayNameFor(model => model.VenueDescription)</a></li>
                <li><a data-toggle="tab" href="#menu1">Map</a></li>
                <li><a data-toggle="tab" href="#menu2">Contact Us</a></li>
            </ul>

            <div class="tab-content">

                @*Description Tab*@
                <div id="home" class="tab-pane fade in active">
                    <p style="white-space: pre-wrap; padding-top:10px;">@Html.DisplayFor(model => model.VenueDescription)</p>
                </div>

                @*Map Tab*@
                <div id="menu1" class="tab-pane fade">
                    @if (ViewBag.hasMap == true)
                    {

                        <div class="row">

                            <div id="googleMap" style="width:500px;height:500px; padding-top: 50px; padding-right: 25px;" class="col-sm-4">

                            </div>

                            <div style="padding-left: 20px; padding-top: 20px;">
                                <h3>Need Directions?</h3>

                                <input type="text" class="form-control" placeholder="Travelling From..." id="txtFrom">

                                <p style="padding-top: 10px; padding-bottom: 10px;">
                                    <button onclick="PlanRoute()" class="btn btn-success">Get Directions</button>
                                </p>

                                <h1 style="text-align:center;" id="txtDirections"></h1>

                                <div id="dir" class="col-sm-5"></div>
                            </div>
                        </div>
                    }

                    else
                    {
                        <h3>No map available</h3>
                    }
                </div>

                @*Contact Us*@
                <div id="menu2" class="tab-pane fade">

                    @if (Model.VenuePhoneNumber != null)
                    {
                        <h3>@Html.DisplayNameFor(model => model.VenuePhoneNumber)</h3>
                        <h4>@Model.VenuePhoneNumber</h4>
                    }

                    @if (Model.VenueEmail != null)
                    {
                        <h3>@Html.DisplayNameFor(model => model.VenueEmail)</h3>
                        <h4>@Model.VenueEmail</h4>
                    }

                </div>
            </div>
        </div>
    </div>


    <div style="padding-top: 25px;">
        @if (ViewBag.IsOwner == true)
            {
            @Html.ActionLink("Add Event", "Create", "Events", new { id = Model.VenueID }, new { @class = "btn btn-info btn-sm" })
        }

        @if (ViewBag.noEvents == true)
            {
            <h2>There is no events for this venue, please check back later</h2>
        }

        else
        {
            <table id="eventsTable" class="table table-striped table-bordered" cellspacing="0">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Event Date</th>
                        <th>Start Type</th>
                        <th>@*Details Button*@</th>

                    </tr>
                </thead>

                <tbody>

                    @foreach (var item in Model.VenueEvents)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.EventTitle)</td>
                            <td>@Html.DisplayFor(modelItem => item.EventDate)</td>
                            <td>@Html.DisplayFor(modelItem => item.EventCategory)</td>
                            <td>@Html.ActionLink("Details", "Details", "Events", new { id = item.EventID }, new { @class = "btn btn-info btn-sm" })</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

<div class="row">
    <h2>Comments</h2>
    <div id="disqus_thread"></div>
</div>

@*</body>*@

@*Google Maps and Directions*@
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyChwQrjSkHEgvgg56PI5G_aEGFoAbk-Vg8"></script>

<script>

    //start

    //Directions
    function PlanRoute() {

        //Check if the user has entered a starting location
        var startingLoc = document.getElementById('txtFrom').value;

        if (startingLoc == null || startingLoc == "") {
            alert("You must enter a starting location first");
        }

        else
        {
            GetMap();
        }

    }

    function GetMap() {

        //Clear last directions
        document.getElementById('dir').innerHTML = "";
        txtDirections.innerHTML = "";

        var directionsService = new google.maps.DirectionsService();
        var directionsDisplay = new google.maps.DirectionsRenderer();

        //Get start and End locations that the user selected
        var startLocation = document.getElementById('txtFrom').value;
        var endLocation =  @Html.Raw(Json.Encode(@ViewBag.Address));

        console.log(startLocation);
        console.log(endLocation);

        var map = new google.maps.Map(document.getElementById('googleMap'), {

        });

        directionsDisplay.setMap(map);
        directionsDisplay.setPanel(document.getElementById('dir'));

        //Map options
        var request = {
            origin: startLocation,
            destination: endLocation,
            travelMode: google.maps.DirectionsTravelMode.DRIVING
        };

        directionsService.route(request, function (response, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                directionsDisplay.setDirections(response);
            }

            $('txtDirections').innerHTML = directions.getDuration().seconds + " seconds";

        });
    }
    //end

    //Google Map
    function GoogleMap(lat, lon) {
        console.log("Google Map function hit");
        // Array of stylin for map
        var styles = [
          {
              stylers: [
                { hue: "#b3ccff" },
                { saturation: -30 }
              ]
          },
          //Road Labels
          {
              featureType: "road",
              elementType: "labels",
              stylers: [
                { visibility: "on" }
              ]
          },
          //Road Geometry
          {
              featureType: "road",
              elementType: "geometry",
              stylers: [
                { lightness: 100 },
                { visibility: "simplified" }
              ]
          }
        ];

        var styledMap = new google.maps.StyledMapType(styles,
          { name: "Styled Map" });

        //Get center using longitude and latitude passed back from controller
        var center = new google.maps.LatLng(lat, lon);

        //Specify Map Options
        var mapOptions = {
            zoom: 17, //Map Zoom Level
            center: center, //Set Map center point
            mapTypeControlOptions: {
                mapTypeIds: [google.maps.MapTypeId.ROADMAP, 'map_style']
            }
        };

        //Assign Map to div
        var map = new google.maps.Map(document.getElementById('googleMap'),
          mapOptions);

        var marker = new google.maps.Marker({
            position: center,
            map: map,
            title: "@ViewBag.EventTitle"
        })

        map.mapTypes.set('map_style', styledMap);
        map.setMapTypeId('map_style');

        google.maps.event.trigger(map, "resize");
        map.setCenter(center);
        // google.maps.event.addDomListener(window, "load", initialize);
    }

    //Comments section
    (function () { // DON'T EDIT BELOW THIS LINE
        var d = document, s = d.createElement('script');

        s.src = '//s00144297.disqus.com/embed.js';
        //src="//s00144297.disqus.com/count.js

        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();

    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        GoogleMap(@ViewBag.Lat, @ViewBag.Long);
    });

</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
